- name: Basic server setup
  hosts: virtualmachines
  become: true
  become_user: root

  pre_tasks:
    - name: Loading environment variables
      tags: always
      set_fact:
        UNIX_USERNAME: '{{ lookup("env", "UNIX_USERNAME") | trim }}'
        UNIX_USER_PASSWORD: '{{ lookup("env", "UNIX_PASSWORD") | trim }}'

  tasks:

    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all packages on servers
      apt: upgrade=dist force_apt_get=yes

    - name: Create a unix user
      user:
        name: "{{ UNIX_USERNAME }}"
        password: "{{ UNIX_PASSWORD | password_hash('sha512') }}"
        groups:
         - sudo
        state: present
        shell: /bin/bash       
        createhome: yes        
        home: "/home/{{ UNIX_USERNAME }}"

    - name: Install git
      apt:
        name: git
        state: present
        update_cache: yes



- name: Install ffplayout
  hosts: virtualmachines
  become: true
  become_user: root 

  vars:
    ffplayout_url_path: https://github.com/ffplayout/ffplayout/releases/download/v0.16.5
    ffplayout_file_name: ffplayout_0.16.5_amd64.deb

  tasks:

    - name: Download ffplayout
      ansible.builtin.get_url:
        url: "{{ ffplayout_url_path }}/{{ ffplayout_file_name }}"
        dest: "/tmp/{{ ffplayout_file_name }}"
        mode: '0700'

    - name: Install deb
      apt:
        deb: "/tmp/{{ ffplayout_file_name }}"

    - name: Set timezone to Asia/Baku
      community.general.timezone:
        name: Asia/Baku

    - name: Enable ffplayout service
      ansible.builtin.systemd:
        name: ffplayout
        enabled: yes

    - name: Enable ffpapi service
      ansible.builtin.systemd:
        name: ffpapi
        enabled: yes

        
  
# - name: Compile ffmpeg
#   hosts: virtualmachines
#   become: true
#   become_user: root

#   vars:
#     source_dir: "/usr/local/src"
#     lib_dir: "/usr/local/lib"
#     bin_dir: "/usr/local/bin"

  # tasks:

  #   - apt: update_cache=yes cache_valid_time=3600

  #   - name: install dependencies
  #     action: apt pkg={{ item }} state=present
  #     with_items:
  #       - git-core
  #       - autoconf 
  #       - automake 
  #       - build-essential 
  #       - libass-dev 
  #       - libgpac-dev
  #       - libtheora-dev 
  #       - libtool 
  #       - libvorbis-dev 
  #       - pkg-config 
  #       - texi2html 
  #       - zlib1g-dev
  #       - libmp3lame-dev
  #       - yasm
  #       - nasm
  #       - libx264-dev
  #       - libvpx-dev
  #       - libopus-dev
  #       - libx265-dev 
  #       - libnuma-dev

  #   - name: clone latest fdk-aac
  #     git: repo=https://github.com/mstorsjo/fdk-aac.git
  #          dest={{ source_dir }}/fdk-aac
  #          accept_hostkey=yes

  #   - name: clone latest ffmpeg
  #     git: repo=https://github.com/FFmpeg/FFmpeg.git
  #          dest={{ source_dir }}/ffmpeg
  #          accept_hostkey=yes

  #   - name: clone latest opus
  #     git: repo=https://gitlab.xiph.org/xiph/opus.git
  #          dest={{ source_dir }}/opus
  #          accept_hostkey=yes

  #   - name: compile fdk-aac
  #     command: "{{ item }}" 
  #     args:
  #       chdir: "{{ source_dir }}/fdk-aac" 
  #       creates: "{{ lib_dir }}/libfdk-aac.a"
  #     with_items:
  #       - autoreconf -fiv
  #       - ./configure --disable-shared
  #       - make
  #       - make install
  #       - make distclean

  #   - name: compile ffmpeg
  #     command: "{{ item }}" 
  #     args:
  #       chdir: "{{ source_dir }}/ffmpeg" 
  #       creates: "{{ bin_dir }}/ffmpeg"
  #     with_items:
  #       - ./configure --bindir={{ bin_dir }} --extra-libs=-ldl --enable-gpl --enable-libass --enable-libfdk-aac --enable-libmp3lame --enable-libopus --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-nonfree
  #       - make
  #       - make install
  #       - make distclean


- name: Install Node.js
  hosts: virtualmachines
  become: true
  become_user: root

  vars:
    NODEJS_VERSION: 18
    ansible_distribution_release: "focal"
  tasks:
    - name: Install the gpg key for nodejs LTS
      apt_key:
        url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
        state: present

    - name: Install the nodejs LTS repos
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_{{ NODEJS_VERSION }}.x {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes

    - name: Install NodeJS
      tags: nodesjs, install
      apt:
        name: nodejs
        state: latest


- name: Install stream-scheduler
  hosts: virtualmachines
  become: true
  become_user: root

  pre_tasks:
    - name: Loading environment variables
      tags: always
      set_fact:
        UNIX_USERNAME: '{{ lookup("env", "UNIX_USERNAME") | trim }}'

  tasks:
    - name: Clone latest stream-scheduler
      git: repo=https://github.com/luddite478/stream-scheduler.git
           dest=/home/{{ UNIX_USERNAME }}/stream-scheduler
           accept_hostkey=yes

    - name: Install packages based on package.json.
      community.general.npm:
        path: '/home/{{ UNIX_USERNAME }}/stream-scheduler'

    - name: Copy .env file
      copy:
        src: ../linux.env
        dest: '/home/{{ UNIX_USERNAME }}/stream-scheduler/.env'

- name: Additional setup
  hosts: virtualmachines
  become: true
  become_user: root

  pre_tasks:
    - name: Loading environment variables
      tags: always
      set_fact:
        UNIX_USERNAME: '{{ lookup("env", "UNIX_USERNAME") | trim }}'
        FFPLAYOUT_MEDIA_FOLDER: '{{ lookup("env", "FFPLAYOUT_MEDIA_FOLDER") | trim }}'
        TMP_MEDIA_FOLDER: '{{ lookup("env", "TMP_MEDIA_FOLDER") | trim }}'
        FFPLAYOUT_PLAYLISTS_FOLDER: '{{ lookup("env", "FFPLAYOUT_PLAYLISTS_FOLDER") | trim }}'
        PLACEHOLDER_PATH: '{{ lookup("env", "PLACEHOLDER_PATH") | trim }}'
  tasks:
    - name: Copy ffplayout config
      copy:
        src: ../prod-ffplayout.yml
        dest: /etc/ffplayout/ffplayout.yml
        owner: '{{ UNIX_USERNAME }}'
        group: '{{ UNIX_USERNAME }}'
        mode: '0777'

    - name: Copy precompiled ffmpeg
      ansible.builtin.copy:
        src: /home/{{ unix_username }}/stream-scheduler/bin/ffmpeg
        dest: /usr/bin/ffmpeg
        owner: '{{ UNIX_USERNAME }}'
        group: '{{ UNIX_USERNAME }}'
        mode: '0777'
        remote_src: true

    - name: Copy precompiled ffprobe
      ansible.builtin.copy:
        src: /home/{{ unix_username }}/stream-scheduler/bin/ffprobe
        dest: /usr/bin/ffprobe
        owner: '{{ UNIX_USERNAME }}'
        group: '{{ UNIX_USERNAME }}'
        mode: '0777'
        remote_src: true

    - name: Changing perm of ffplayout folder 1
      file:
        path: "{{ FFPLAYOUT_MEDIA_FOLDER }}"
        state: directory
        mode: 0777

    - name: Changing perm of ffplayout folder 2
      file:
        path: "{{ TMP_MEDIA_FOLDER }}"
        state: directory
        mode: 0777

    - name: Changing perm of ffplayout folder 3
      file:
        path: "{{ FFPLAYOUT_PLAYLISTS_FOLDER }}"
        state: directory
        mode: 0777

    - name: Check if placeholder exists
      stat:
        path: "{{ PLACEHOLDER_PATH }}"
      register: stat_result

    # - name: Create the placeholder, if it doesnt exist already
    #   shell: ffmpeg -i '/home/{{ UNIX_USERNAME|quote }}/stream-scheduler/sounds/brown_noise_5min.aac'
    #   when: not stat_result.stat.exists
